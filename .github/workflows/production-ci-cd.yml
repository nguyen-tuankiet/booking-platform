name: CI/CD Pipeline - Production

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  # Use semantic versioning for production
  IMAGE_TAG: ${{ github.ref_type == 'tag' && github.ref_name || format('v1.0.{0}', github.run_number) }}

jobs:
  # Job 1: Build Common Library First  
  build-common-library:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Download Maven local repository
        uses: actions/download-artifact@v4
        with:
          name: maven-local-repo
          path: ~/.m2/repository

      - name: Install common-library to local repository
        run: |
          cd common-library
          mvn clean install -DskipTests
          
      - name: Upload Maven local repository
        uses: actions/upload-artifact@v4
        with:
          name: maven-local-repo
          path: ~/.m2/repository
          retention-days: 1

  # Job 2: Comprehensive Testing (more thorough than develop)
  comprehensive-tests:
    needs: build-common-library
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          eureka-server,
          api-gateway, 
          auth-service,
          booking-service,
          payment-service,
          notification-service
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run comprehensive tests for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          # Run all tests including integration tests
          mvn clean verify -Pintegration-test
          
      - name: Run code coverage
        run: |
          cd ${{ matrix.service }}
          mvn jacoco:report
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ${{ matrix.service }}/target/site/jacoco/jacoco.xml
          flags: ${{ matrix.service }}
          fail_ci_if_error: false

      - name: Build production artifacts
        run: |
          cd ${{ matrix.service }}
          mvn clean package -Pproduction

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-production-jar
          path: ${{ matrix.service }}/target/*.jar
          retention-days: 90  # Keep longer for production

  # Job 3: Code Quality Analysis
  code-quality:
    needs: build-common-library
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Run SonarCloud analysis (requires SONAR_TOKEN secret)
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=booking-microservices \
            -Dsonar.organization=your-org \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN

  # Job 4: Build Production Docker Images
  docker-build-production:
    needs: [comprehensive-tests, code-quality]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          eureka-server,
          api-gateway, 
          auth-service,
          booking-service,
          payment-service,
          notification-service
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Download production artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service }}-production-jar
          path: ${{ matrix.service }}/target/

      - name: Build and push production Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/booking-${{ matrix.service }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_USERNAME }}/booking-${{ matrix.service }}:latest
          platforms: linux/amd64,linux/arm64  # Multi-platform for production
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: Enhanced Security Scanning for Production
  security-scan-production:
    needs: docker-build-production
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          eureka-server,
          api-gateway, 
          auth-service,
          booking-service,
          payment-service,
          notification-service
        ]
    
    steps:
      - name: Run comprehensive Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_USERNAME }}/booking-${{ matrix.service }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'  # More strict for production

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Run Docker Scout (if available)
        continue-on-error: true
        run: |
          docker scout cves ${{ env.DOCKER_USERNAME }}/booking-${{ matrix.service }}:${{ env.IMAGE_TAG }}

      # Fail if critical vulnerabilities found
      - name: Check for critical vulnerabilities
        run: |
          if docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
             aquasec/trivy:latest image --exit-code 1 --severity CRITICAL \
             ${{ env.DOCKER_USERNAME }}/booking-${{ matrix.service }}:${{ env.IMAGE_TAG }}; then
            echo " No critical vulnerabilities found"
          else
            echo " Critical vulnerabilities detected! Blocking deployment."
            exit 1
          fi

  # Job 6: Manual Approval for Production Deployment
  approval:
    needs: [security-scan-production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://your-production-domain.com
    
    steps:
      - name: Manual approval checkpoint
        run: |
          echo " Production deployment requires manual approval"
          echo " All tests passed and security scans completed"
          echo " Ready for production deployment"
          echo "Version: ${{ env.IMAGE_TAG }}"

  # Job 7: Deploy to Production
  deploy-production:
    needs: [approval]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create production docker-compose
        run: |
          # Create production docker-compose with proper image tags
          cp docker-compose.yml docker-compose.prod.yml
          
          # Replace build contexts with production images
          sed -i "s|build:.*|image: ${{ env.DOCKER_USERNAME }}/booking-eureka-server:${{ env.IMAGE_TAG }}|g" docker-compose.prod.yml
          sed -i "s|dockerfile:.*||g" docker-compose.prod.yml
          
          # Update each service with production image
          sed -i "/service-discovery:/a\\    image: ${{ env.DOCKER_USERNAME }}/booking-eureka-server:${{ env.IMAGE_TAG }}" docker-compose.prod.yml
          sed -i "/api-gateway:/a\\    image: ${{ env.DOCKER_USERNAME }}/booking-api-gateway:${{ env.IMAGE_TAG }}" docker-compose.prod.yml
          sed -i "/auth-service:/a\\    image: ${{ env.DOCKER_USERNAME }}/booking-auth-service:${{ env.IMAGE_TAG }}" docker-compose.prod.yml
          sed -i "/booking-service:/a\\    image: ${{ env.DOCKER_USERNAME }}/booking-booking-service:${{ env.IMAGE_TAG }}" docker-compose.prod.yml
          sed -i "/payment-service:/a\\    image: ${{ env.DOCKER_USERNAME }}/booking-payment-service:${{ env.IMAGE_TAG }}" docker-compose.prod.yml
          sed -i "/notification-service:/a\\    image: ${{ env.DOCKER_USERNAME }}/booking-notification-service:${{ env.IMAGE_TAG }}" docker-compose.prod.yml
          
          # Add production-specific configurations
          echo "    restart: always" >> docker-compose.prod.yml
          echo "    logging:" >> docker-compose.prod.yml
          echo "      driver: json-file" >> docker-compose.prod.yml
          echo "      options:" >> docker-compose.prod.yml
          echo "        max-size: 10m" >> docker-compose.prod.yml
          echo "        max-file: 3" >> docker-compose.prod.yml

      - name: Upload production docker-compose
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-production-${{ env.IMAGE_TAG }}
          path: docker-compose.prod.yml
          retention-days: 365  # Keep for 1 year

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
             **Production Release ${{ github.ref_name }}**
            
            ##  Docker Images
            - booking-eureka-server:${{ env.IMAGE_TAG }}
            - booking-api-gateway:${{ env.IMAGE_TAG }}
            - booking-auth-service:${{ env.IMAGE_TAG }}
            - booking-booking-service:${{ env.IMAGE_TAG }}
            - booking-payment-service:${{ env.IMAGE_TAG }}
            - booking-notification-service:${{ env.IMAGE_TAG }}
            
            ##  Quality Gates
             All tests passed
             Security scan completed
             Code quality approved
             Manual approval granted
            
            ##  Deployment Instructions
            Download `docker-compose-production-${{ env.IMAGE_TAG }}.yml` from release assets
            ```bash
            docker-compose -f docker-compose-production-${{ env.IMAGE_TAG }}.yml up -d
            ```
          draft: false
          prerelease: false

      - name: Production deployment completed
        run: |
          echo " Production deployment completed successfully!"
          echo " Version: ${{ env.IMAGE_TAG }}"
          echo " All services are now running with production images"
          echo " Monitor the deployment at: https://your-monitoring-url.com"

  # Job 8: Post-deployment Health Check
  health-check:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Wait for services to start
        run: sleep 60

      - name: Health check notification
        run: |
          echo  Post-deployment health checks should be performed"
          echo " Verify the following:"
          echo "   All services are responding"
          echo "   Database connections are healthy"
          echo "   External API integrations work"
          echo "   Load balancer is distributing traffic"
          echo "   Monitoring systems show green status"

  # Job 9: Rollback Plan (if needed)
  rollback-info:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Rollback instructions
        run: |
          echo " ROLLBACK INSTRUCTIONS"
          echo "If deployment fails, rollback to previous version:"
          echo "1. Get previous production tag from Docker Hub"
          echo "2. Update docker-compose with previous image tags"
          echo "3. Run: docker-compose -f docker-compose.prod.yml up -d"
          echo "4. Verify all services are healthy"
          echo "5. Update monitoring and alerting systems"
