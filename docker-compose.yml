services:
  # Databases
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "true"
      MYSQL_DATABASE: auth_booking
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password


  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data


  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"


  kafka:
    image: confluentinc/cp-kafka:7.4.0
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper


  # Microservices
  service-discovery:
    build:
      context: .
      dockerfile: eureka-server/Dockerfile
    ports:
      - "8761:8761"
    environment:
      - SERVER_PORT=8761
      - EUREKA_INSTANCE_HOSTNAME=service-discovery
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-discovery:8761/eureka/



  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - mysql
      - redis
      - service-discovery
    environment:
      - SERVER_PORT=8081
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/auth_booking?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=Asia/Ho_Chi_Minh
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
    restart: unless-stopped

  booking-service:
    build:
      context: .
      dockerfile: booking-service/Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      - kafka
      - redis
      - service-discovery
    environment:
      - SERVER_PORT=8082
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      # Fix MongoDB URI
      - SPRING_DATA_MONGODB_URI=mongodb+srv://tuankietcoder2211:kiet2211@booking-service.xoqbdpp.mongodb.net/booking-service?retryWrites=true&w=majority&appName=booking-service
      # Add these for better connection handling
      - SPRING_DATA_MONGODB_SOCKET_TIMEOUT=10000
      - SPRING_DATA_MONGODB_CONNECT_TIMEOUT=10000
    restart: unless-stopped

  payment-service:
    build:
      context: .
      dockerfile: payment-service/Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      - mysql
      - kafka
      - service-discovery
    env_file:
      - ./payment-service/.env
    environment:
      - SERVER_PORT=8083
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/payment_service?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
    restart: unless-stopped

  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      - kafka
      - service-discovery
    environment:
      - SERVER_PORT=8084
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
    restart: unless-stopped

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - service-discovery
      - auth-service
      - booking-service
      - payment-service
      - notification-service
    environment:
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED=true
      - SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_LOWER_CASE_SERVICE_ID=true
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data: